#!/usr/bin/env python3

#
# Problem 12: Highly divisible triangular number - https://projecteuler.net/problem=12
# by Matias D. Lee
#
# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?
# 

import doctest
from math import sqrt
from functools import reduce

#
#  First the solution, then an inefficient solution 
#

all_primes = set({})


def split(n):
	""" Function returns a and b such that 'a * b = n' and there is 
	no c such that 'n mod c = 0' and 'a < c < sqr(n)'.  If n is prime, 
	functions returns None
	
	>>> split(5)
	

	>>> split(10)
	(2, 5)

	>>> split(26)
	(2, 13)
	"""
	d = int(sqrt(n))
	for i in range(d,1,-1):
		if n%i==0:
			return i, int(n/i)
	return None

def factorization(n):
    """
    Function returns an ordered list xs of primes s.t. 
    for all p in xs,  p divides n.  
    
    >>> factorization(12)
    [2, 2, 3]

    >>> factorization(24)
    [2, 2, 2, 3]

    >>> factorization(28)
    [2, 2, 7]

    """
    pila = [n]
    primes = []
    while len(pila)!=0:
        top = pila.pop()
        if top in all_primes:
            primes.append(top)
            continue
        answer = split(top)
        if answer is None:
            primes.append(top)
            all_primes.add(top)
        else:
        	a,b = answer
        	pila += [a,b]

    return sorted(primes)

def powerset_of_a_list(xs):
    """
    >>> powerset_of_a_list([10])
    [[], [10]]

    >>> powerset_of_a_list([10, 2])
    [[], [2], [10], [2, 10]]

    >>> powerset_of_a_list([2, 2])
    [[], [2], [2], [2, 2]]
    """
    if len(xs) == 0:
        return [[]]

    if len(xs) >0:
        x = xs[0]
        xs_prime = xs[1:]
        rec_case = powerset_of_a_list(xs_prime) 
        return rec_case + [ys + [x] for ys in rec_case]

from functools import reduce

def calc_factors(n):
    """
    >>> calc_factors(4)
    {1, 2, 4}

    >>> calc_factors(28)
    {1, 2, 4, 7, 14, 28}
    """
    prime_factors = factorization(n)
    powerset = powerset_of_a_list(prime_factors)
    factors = set([])
    for xs in powerset:
        if len(xs) == 0:
            factors.add(1)
        else:
            factor = reduce(lambda x,y : x * y, xs)
            factors.add(factor)
    return factors

def p12_solver(n):
    """
    >>> p12_solver(5)
    28

    >>> p12_solver(4)
    28

    >>> p12_solver(3)
    6
    """
    tri_number = 1
    idx = 1
    number_of_factors = len(calc_factors(tri_number))
    while(number_of_factors <= n):
        idx += 1
        tri_number += idx
        number_of_factors = len(calc_factors(tri_number))
    
    return tri_number


if __name__ == '__main__':
    print(p12_solver(500))


#
# Inneficient solution
#

divisors = {}

def get_divisors(n):
    """ 
    Functions returns all numbers thats divides n. 

    >>> get_divisors(4)
    {1, 2, 4}
    
    >>> get_divisors(30)
    {1, 2, 3, 5, 6, 10, 15, 30}
    """
    if n in divisors:
        return divisors[n]

    divisors_of_n = {1, n}
    candidates = set(range(2,n))
    while len(candidates) > 0:
        candidate = candidates.pop()
        if n % candidate == 0:
            friends_candidate = int(n / candidate)
            candidates = candidates - {friends_candidate}
            for k in [candidate, friends_candidate]:
                divisors_of_n.add(k)
                extra_divisors = get_divisors(k)
                divisors_of_n = divisors_of_n.union(extra_divisors)
                candidates = candidates - extra_divisors
    
    divisors[n] = divisors_of_n
    return divisors[n]

def problem_12_solver(n_divisors):
    """ Function is a general solver for  problem 12. 'n_divisors' is the number of
    divisors that the triangle number has to overpass.

    >>> problem_12_solver(3)
    6

    >>> problem_12_solver(5)
    28
    """
    t_number = 1
    i = 1
    N = len(get_divisors(t_number))
    while(N <= n_divisors):
    #    print('Checked {}! - {}'.format(t_number, N))
        i += 1
        t_number += i
        N = len(get_divisors(t_number))
    return t_number

